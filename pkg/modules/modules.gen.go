// Package modules provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package modules

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Module defines model for Module.
type Module struct {
	Versions *[]ModuleVersion `json:"versions,omitempty"`
}

// ModuleDetails defines model for ModuleDetails.
type ModuleDetails struct {
	Name        *string   `json:"name,omitempty"`
	Namespace   *string   `json:"namespace,omitempty"`
	Provider    *string   `json:"provider,omitempty"`
	PublishedAt *string   `json:"published_at,omitempty"`
	Source      *string   `json:"source,omitempty"`
	Version     *string   `json:"version,omitempty"`
	Versions    *[]string `json:"versions,omitempty"`
}

// ModuleRegistry defines model for ModuleRegistry.
type ModuleRegistry struct {
	Modules *[]Module `json:"modules,omitempty"`
}

// ModuleVersion defines model for ModuleVersion.
type ModuleVersion struct {
	Version *string `json:"version,omitempty"`
}

// Name defines model for name.
type Name string

// Namespace defines model for namespace.
type Namespace string

// Source defines model for source.
type Source string

// System defines model for system.
type System string

// Version defines model for version.
type Version string

// ReturnedModule defines model for ReturnedModule.
type ReturnedModule ModuleDetails

// ReturnedVersions defines model for ReturnedVersions.
type ReturnedVersions ModuleRegistry

// UploadParams defines parameters for Upload.
type UploadParams struct {
	// code URL of the module
	ModuleSource *Source `json:"module-source,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Discovery process
	// (GET /.well-known/terraform.json)
	Discovery(w http.ResponseWriter, r *http.Request)
	// Latest Version for a Specific Module Provider
	// (GET /{namespace}/{name}/{system})
	GetLatestVersion(w http.ResponseWriter, r *http.Request, namespace Namespace, name Name, system System)
	// List module versions
	// (GET /{namespace}/{name}/{system}/versions)
	ListVersions(w http.ResponseWriter, r *http.Request, namespace Namespace, name Name, system System)
	// Upload module version
	// (POST /{namespace}/{name}/{system}/{version})
	Upload(w http.ResponseWriter, r *http.Request, namespace Namespace, name Name, system System, version Version, params UploadParams)
	// Actually download tarball
	// (GET /{namespace}/{name}/{system}/{version}/archive.tgz)
	Download(w http.ResponseWriter, r *http.Request, namespace Namespace, name Name, system System, version Version)
	// Download module source
	// (GET /{namespace}/{name}/{system}/{version}/download)
	GetDownloadLink(w http.ResponseWriter, r *http.Request, namespace Namespace, name Name, system System, version Version)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Discovery operation middleware
func (siw *ServerInterfaceWrapper) Discovery(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Discovery(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLatestVersion operation middleware
func (siw *ServerInterfaceWrapper) GetLatestVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace Namespace

	err = runtime.BindStyledParameter("simple", false, "namespace", chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "system" -------------
	var system System

	err = runtime.BindStyledParameter("simple", false, "system", chi.URLParam(r, "system"), &system)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLatestVersion(w, r, namespace, name, system)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListVersions operation middleware
func (siw *ServerInterfaceWrapper) ListVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace Namespace

	err = runtime.BindStyledParameter("simple", false, "namespace", chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "system" -------------
	var system System

	err = runtime.BindStyledParameter("simple", false, "system", chi.URLParam(r, "system"), &system)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVersions(w, r, namespace, name, system)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Upload operation middleware
func (siw *ServerInterfaceWrapper) Upload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace Namespace

	err = runtime.BindStyledParameter("simple", false, "namespace", chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "system" -------------
	var system System

	err = runtime.BindStyledParameter("simple", false, "system", chi.URLParam(r, "system"), &system)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version Version

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadParams

	headers := r.Header

	// ------------- Optional header parameter "module-source" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("module-source")]; found {
		var ModuleSource Source
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "module-source", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "module-source", runtime.ParamLocationHeader, valueList[0], &ModuleSource)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "module-source", Err: err})
			return
		}

		params.ModuleSource = &ModuleSource

	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Upload(w, r, namespace, name, system, version, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Download operation middleware
func (siw *ServerInterfaceWrapper) Download(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace Namespace

	err = runtime.BindStyledParameter("simple", false, "namespace", chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "system" -------------
	var system System

	err = runtime.BindStyledParameter("simple", false, "system", chi.URLParam(r, "system"), &system)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version Version

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Download(w, r, namespace, name, system, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDownloadLink operation middleware
func (siw *ServerInterfaceWrapper) GetDownloadLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace Namespace

	err = runtime.BindStyledParameter("simple", false, "namespace", chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name Name

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "system" -------------
	var system System

	err = runtime.BindStyledParameter("simple", false, "system", chi.URLParam(r, "system"), &system)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "system", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version Version

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDownloadLink(w, r, namespace, name, system, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/.well-known/terraform.json", wrapper.Discovery)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{namespace}/{name}/{system}", wrapper.GetLatestVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{namespace}/{name}/{system}/versions", wrapper.ListVersions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/{namespace}/{name}/{system}/{version}", wrapper.Upload)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{namespace}/{name}/{system}/{version}/archive.tgz", wrapper.Download)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{namespace}/{name}/{system}/{version}/download", wrapper.GetDownloadLink)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"299ZFb6cZXifyL8DAAD//5rWYt6lGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
